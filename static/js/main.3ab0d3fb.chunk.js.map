{"version":3,"sources":["media/images/straight_key.jpg","media/images/electronic_key.jpg","contexts/gameModeContext.js","contexts/morseBufferContext.js","contexts/wordListPickerContext.js","contexts/wordFeederContext.js","contexts/challengeContext.js","contexts/gameClockContext.js","contexts/wpmContext.js","contexts/frequencyContext.js","contexts/keyTypeContext.js","hooks/useElectronicKey.js","components/ElectronicKey.js","components/DitDahDisplay.js","components/MorseBufferDisplay.js","components/MorseHistory.js","hooks/useStraightKey.js","components/StraightKey.js","app-modes/PracticeMode.js","components/ChallengeBufferDisplay.js","components/ChallengeControls.js","components/ChallengeWord.js","components/GameClock.js","app-modes/ChallengeMode.js","components/ModePicker.js","components/KeyTypePicker.js","data/social.js","components/Header.js","hooks/useMorsePlayer.js","components/WordsPerMinute.js","components/MorseButtons.js","components/Footer.js","components/WordCountPicker.js","components/WordListPicker.js","components/ChallengeReady.js","components/ChallengeComplete.js","components/ChallengeOverlay.js","components/Info.js","components/Legend.js","components/PlayMorseInput.js","components/SidebarLeft.js","components/FrequencyPicker.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GameModeContext","React","createContext","MorseBufferContext","MorseBufferContextProvider","props","useState","morseCharBuffer","setMorseCharBuffer","morseWords","setMorseWords","Provider","value","children","WordListPickerContext","WordListPickerContextProvider","wordListCategory","setWordListCategory","wordListCount","setWordListCount","wordList","alphabet","words","numbers","boys","girls","trek","common100","wordListCountMax","length","slice","wordListShuffled","arr","temporaryValue","randomIndex","array","currentIndex","Math","floor","random","randomize","metadata","name","description","WordFeederContext","WordFeederContextProvider","word","useContext","wordIndex","setWordIndex","order","setOrder","undefined","getNextWord","prev","resetFeeder","ChallengeContext","ChallengeContextProvider","challengeLetters","challengeState","setChallengeState","morseArray","split","filter","l","challengeWordClass","correctCharIndexes","incorrectMorseIndexes","offset","completeChallenge","showOverlay","challengeOverlay","document","getElementById","classList","remove","forEach","item","index","morseCode","toLowerCase","push","childNodes","add","newState","splice","join","setTimeout","node","startChallenge","countdown","count","innerHTML","setInterval","clearInterval","cancelChallenge","GameClockContext","GameClockContextProvider","gameClockTime","setGameClockTime","clockIsRunning","setClockIsRunning","intervals","setIntervals","startGameClock","stopGameClock","cleanup","i","useEffect","WPMContext","WPMContextProvider","wpm","setWPM","Number","FrequencyContext","FrequencyContextProvider","frequency","setFrequency","KeyTypeContext","KeyTypeContextProvider","keyType","setKeyType","depressSyncTime","depressSyncTimer","context","gameMode","ditMaxTime","letterGapMinTime","wordGapMaxTime","morseHistorySize","config","historySize","leftIsPressed","rightIsPressed","queueRunning","queue","pressedFirst","lastPlayed","depressSyncTimerRunning","gapTime","gapTimer","paddlesReleasedSimultaneously","currentPromise","Promise","resolve","AudioContext","window","webkitAudioContext","playWithSpaces","ditDah","delay","playDuration","reject","state","resume","o","createOscillator","type","onended","startTime","currentTime","g","createGain","gain","exponentialRampToValueAtTime","mainVolume","setValueAtTime","connect","destination","start","setTargetAtTime","stop","play","then","sendPressedToQueue","localQueue","waitTime","clear","pop","clearTimeout","executeQueue","handleInputStart","event","preventDefault","keyCode","activeElement","id","tagName","blur","repeat","target","querySelector","handleInputEnd","stopDepressSyncTimer","startDepressSyncTimer","contains","addEventListener","querySelectorAll","paddle","removeEventListener","val","memo","useElectronicKey","dd","className","ditDahs","map","ditdah","key","alphanumeric","letters","toUpperCase","text","includes","newWord","letter","onClick","charTimer","charTime","isRunning","morseButton","morseHistory","scrollTop","scrollHeight","useStraightKey","MorseHistory","morseChar","spannedWord","minutes","seconds","setGameMode","handleClick","e","button","style","visibility","class","shareLinks","icon","link","encodeURIComponent","contactLinks","width","height","url","title","w","h","dualScreenLeft","screenLeft","screen","left","dualScreenTop","screenTop","top","innerWidth","documentElement","clientWidth","innerHeight","clientHeight","newWindow","open","focus","PopupCenter","contacts","Object","keys","contact","timeouts","playMorseWord","morse","Array","from","firstWord","char","useMorsePlayer","minWPM","maxWPM","prevWPM","min","max","onChange","options","defaultValue","orderOpts","wl","time","src","straight_key","alt","electronic_key","href","rel","innerText","convertWordToMorse","special","inputValue","setInputValue","morseTranslation","setMorseTranslation","a","trim","r","replace","placeholder","maxLength","sidebarContent","setSidebarContent","navClicked","toggle","minFreq","maxFreq","prevFreq","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3ab0d3fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/straight_key.f140bc7b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/electronic_key.cd2cf560.jpg\";","import React, {useState} from \"react\"\nconst GameModeContext = React.createContext()\n\nfunction GameModeContextProvider(props) {\n    const [gameMode, setGameMode] = useState('practice')\n\n    return (\n        <GameModeContext.Provider value={{gameMode: gameMode, setGameMode: setGameMode}}>\n            {props.children}\n        </GameModeContext.Provider>\n    )\n}\n\nexport {GameModeContextProvider, GameModeContext}\n","import React, {useState} from \"react\"\n\nconst MorseBufferContext = React.createContext()\n\nfunction MorseBufferContextProvider(props) {\n    \n    const [morseCharBuffer, setMorseCharBuffer] = useState('')\n    const [morseWords, setMorseWords] = useState([])\n    \n    return (\n        <MorseBufferContext.Provider value={{\n            morseCharBuffer: morseCharBuffer,\n            morseWords: morseWords,\n            setMorseCharBuffer: setMorseCharBuffer,\n            setMorseWords: setMorseWords\n            }}>\n            {props.children}\n        </MorseBufferContext.Provider>\n    )\n}\n\nexport {MorseBufferContextProvider, MorseBufferContext}\n","import React, {useState} from \"react\"\nimport alphabet from '../data/alphabet.json'\nimport numbers from '../data/numbers.json'\nimport common100 from '../data/common100.json'\nimport boys from '../data/names_boys.json'\nimport girls from '../data/names_girls.json'\nimport trek from '../data/startrek.json'\n\n\nconst WordListPickerContext = React.createContext()\n\nfunction WordListPickerContextProvider(props) {\n\n    const [wordListCategory, setWordListCategory] = useState('alphabet')\n    const [wordListCount, setWordListCount] = useState(10)\n\n    let wordList = []\n\n    switch (wordListCategory) {\n        case \"alphabet\":\n            wordList = alphabet.words\n            break\n        case \"numbers\":\n            wordList = numbers.words\n            break\n        case \"boys\":\n            wordList = boys.words\n            break\n        case \"girls\":\n            wordList = girls.words\n            break\n        case \"startrek\":\n            wordList = trek.words\n            break\n        case \"common100\":\n            wordList = common100.words\n            break\n        default:\n            wordList = alphabet.words\n    }\n\n    const wordListCountMax = wordList.length\n\n    const metadata = {\n        'alphabet': {name: 'Alphabet', description: 'All letters of the alphabet'},\n        'numbers': {name: 'Numbers', description: '0-9'},\n        'boys': {name: 'Boys Names', description: 'Popular Boys Names'},\n        'girls': {name: 'Girls Names', description: 'Popular Girls Names'},\n        'startrek': {name: 'Star Trek', description: 'Star Trek universe'},\n        'common100': {name: 'Common Words', description: '100 Most Common Words'}\n    }\n\n    // Shuffle input array and return\n    function randomize(arr) {\n        let array = [...arr]\n        let currentIndex = array.length, temporaryValue, randomIndex;\n        \n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n        \n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n        \n            // And swap it with the current element.\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n        return array;\n    }\n\n    return (\n        <WordListPickerContext.Provider value={{\n            wordList: wordList.slice(0,wordListCount), \n            wordListShuffled: randomize(wordList).slice(0,wordListCount), \n            wordListCategory: wordListCategory, \n            setWordListCategory: setWordListCategory, \n            metadata: metadata, \n            wordListCount: wordListCount, \n            setWordListCount: setWordListCount,\n            wordListCountMax: wordListCountMax\n        }}>\n            {props.children}\n        </WordListPickerContext.Provider>\n    )\n}\n\nexport {WordListPickerContextProvider, WordListPickerContext}\n","import React, {useState, useContext} from \"react\"\nimport { WordListPickerContext } from \"./wordListPickerContext\"\nconst WordFeederContext = React.createContext()\n\nfunction WordFeederContextProvider(props) {\n\n    const {wordList, wordListShuffled} = useContext(WordListPickerContext)\n\n    const [wordIndex, setWordIndex] = useState(0)\n    const [order, setOrder] = useState('sequential')\n    let word \n\n    // Set word list ordered appropriately\n    if (order === 'sequential') {\n        if (wordList[wordIndex] === undefined) {\n            word = [wordList[0]]\n        }\n        else {\n            word = wordList[wordIndex]\n        }\n    }\n    else if (order === 'random') {\n        if (wordListShuffled[wordIndex] === undefined) {\n            word = [wordListShuffled[0]]\n        }\n        else {\n            word = wordListShuffled[wordIndex]\n        }\n    }\n\n    function resetFeeder() {\n        setWordIndex(0)\n    }\n    \n    function getNextWord() {\n        setWordIndex(prev => prev + 1)\n    }\n    \n    return (\n        <WordFeederContext.Provider value={{word: word, getNextWord: getNextWord, resetFeeder: resetFeeder, setOrder: setOrder}}>\n            {props.children}\n        </WordFeederContext.Provider>\n    )\n}\n\nexport {WordFeederContextProvider, WordFeederContext}\n","import React, {useState, useContext} from \"react\"\nimport { WordFeederContext } from \"./wordFeederContext\"\nimport { MorseBufferContext } from \"./morseBufferContext\";\nimport morseCode from '../data/morse-reverse.json'\n\n\nconst ChallengeContext = React.createContext()\n\nfunction ChallengeContextProvider(props) {\n\n    const [challengeState, setChallengeState] = useState('ready')\n    const {resetFeeder} = useContext(WordFeederContext)\n    const {word, getNextWord} = useContext(WordFeederContext)\n    const {morseCharBuffer, setMorseCharBuffer} = useContext(MorseBufferContext)\n    \n    \n    let morseArray = morseCharBuffer.split('_').filter(l => l !== '')\n    let challengeWordClass = ''\n    \n    let correctCharIndexes = [] // Indexes of correct letters in Challenge Word\n    let incorrectMorseIndexes = [] // Indexes of incorrect morse characters in morse character buffer\n    \n    let offset = 0\n    let challengeLetters\n\n\n    function startChallenge() {\n\n        let countdown\n        let count = 3\n\n        // Challenge countdown setup\n        document.getElementById('challengeReady').classList.add('starting')\n        document.getElementById('challengeReady').innerHTML = `<span id=\"message\">Challenge starting in</span><span id=\"count\">${count}</span>`\n        // Start Challenge countdown\n        countdown = setInterval(() => {\n            count--\n            if (count === 0) {\n                // Do this when countdown hits 0\n                document.getElementById('challenge-overlay').classList.add('fade')\n                clearInterval(countdown)\n                setTimeout(() => {\n                    document.getElementById('challenge-overlay').classList.add('hide')\n                    // Start Challenge\n                    setChallengeState('started')\n                }, 900);\n            }\n            document.getElementById('challengeReady').innerHTML = `<span id=\"message\">Challenge starting in</span><span id=\"count\">${count}</span>`\n        }, 1000)\n    }\n\n    function completeChallenge() {\n        if (challengeState !== 'completed') {\n            setChallengeState('completed')\n            resetFeeder()\n            showOverlay()\n        }\n    }\n\n    function cancelChallenge() {\n        if (challengeState !== 'cancelled') {\n            setChallengeState('cancelled')\n            resetFeeder()\n            showOverlay()\n        }\n    }\n\n    function showOverlay() {\n        const challengeOverlay = document.getElementById('challenge-overlay')\n        challengeOverlay.classList.remove('fade')\n        challengeOverlay.classList.remove('hide')\n    }\n\n\n    // If no more words in wordlist, feeder returns first word in an array\n    if (typeof word === 'object') {\n        completeChallenge()\n        challengeLetters = word[0].split('')\n    }\n    else {\n        challengeLetters = word.split('')\n    }\n\n    // Iterate through the morse character buffer and compare with each letter of challenge word\n    morseArray.forEach((item, index) => {        \n        if (morseCharBuffer.slice(-1) === '_') { // If end of morse character\n            \n            let morseLetter = morseCode[morseArray[index]] || '[?]'\n            let challengeLetter = challengeLetters[index-offset].toLowerCase()\n            \n            if (morseLetter === challengeLetter) {\n                correctCharIndexes.push(index-offset)\n                \n                document.getElementById('challengeWord').childNodes[index-offset].classList.add('correct')\n            }\n            else {\n                incorrectMorseIndexes.push(index)\n                if (incorrectMorseIndexes.length > 0) {\n                    setMorseCharBuffer(prev => {\n                        let newState = prev.split('_').filter(l => l !== '')\n                        newState.splice(incorrectMorseIndexes[0], 1)\n                        newState = newState.join('_') + '_'\n                        \n                        return newState\n                    })\n                    incorrectMorseIndexes.splice(1,incorrectMorseIndexes.length)\n                }\n                offset = incorrectMorseIndexes.length\n            }\n        }\n    })\n\n\n    // Retrieve next word once all characters are correct\n    if (correctCharIndexes.length === challengeLetters.length) {\n        challengeWordClass = 'correct'\n        setTimeout(() => {\n            setMorseCharBuffer('')\n            morseArray = []\n            incorrectMorseIndexes = []\n            offset = 0\n            if (document.getElementById('challengeWord') !== null) {\n                document.getElementById('challengeWord').childNodes.forEach(node => {\n                    node.classList = \"cLetter\"\n                })\n            }\n        }, 800)\n        setTimeout(() => {\n            if (correctCharIndexes.length > 0) {\n                correctCharIndexes = []\n                getNextWord()\n            }\n        }, 1000)\n    }\n\n    \n    return (\n        <ChallengeContext.Provider value={{\n            challengeState: challengeState,\n            setChallengeState: setChallengeState,\n            startChallenge: startChallenge,\n            completeChallenge: completeChallenge,\n            cancelChallenge: cancelChallenge,\n            challengeWordClass: challengeWordClass,\n            morseArray: morseArray,\n            incorrectMorseIndexes: incorrectMorseIndexes\n            }}>\n            {props.children}\n        </ChallengeContext.Provider>\n    )\n}\n\nexport {ChallengeContextProvider, ChallengeContext}\n","import React, {useState, useContext, useEffect} from \"react\"\nimport { ChallengeContext } from \"./challengeContext\"\nconst GameClockContext = React.createContext()\n\nfunction GameClockContextProvider(props) {\n\n    const [gameClockTime, setGameClockTime] = useState(0)\n    const [clockIsRunning, setClockIsRunning] = useState(false)\n    const [intervals, setIntervals] = useState([])\n    const {challengeState, setChallengeState} = useContext(ChallengeContext)\n\n\n    function startGameClock() {\n        if (!clockIsRunning) {\n            setClockIsRunning(true)\n            setIntervals(prev => [...prev, (setInterval(() => {\n                    if (document.getElementById('gameClock') === null) {\n                        stopGameClock()\n                        return\n                    }\n                    setGameClockTime(prev => prev + 1)\n                }, 1000))\n            ])\n        }\n    }\n    function stopGameClock() {\n        if (clockIsRunning) {\n            cleanup()\n            setClockIsRunning(false)\n        }\n    }\n\n    // Clear game clock intervals\n    function cleanup() {\n        for (let i = 0; i < intervals.length; i++) {\n            clearInterval(intervals[i]);\n        }\n    }\n\n    // Trigger game clock changes on challenge state change\n    useEffect(() => {\n        switch (challengeState) {\n            case 'ready':\n                setGameClockTime(0)\n                cleanup()\n                break\n            case 'started':\n                startGameClock()\n                break\n            case 'completed':\n                stopGameClock()\n                break\n            case 'cancelled':\n                stopGameClock()\n                setChallengeState('ready')\n                break\n            default:\n                return\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [challengeState])\n    \n\n    return (\n        <GameClockContext.Provider value={{\n            gameClockTime: gameClockTime,\n            setGameClockTime: setGameClockTime,\n            startGameClock: startGameClock,\n            stopGameClock: stopGameClock,\n            cleanup: cleanup,\n            clockIsRunning: clockIsRunning,\n            intervals: intervals\n            }}>\n            {props.children}\n        </GameClockContext.Provider>\n    )\n}\n\nexport {GameClockContextProvider, GameClockContext}\n","import React, {useState} from \"react\"\n\nconst WPMContext = React.createContext()\n\nfunction WPMContextProvider(props) {\n    \n    const [wpm, setWPM] = useState(10)\n\n    return (\n        <WPMContext.Provider value={{\n            wpm: Number(wpm),\n            setWPM: setWPM}\n        }>\n            {props.children}\n        </WPMContext.Provider>\n    )\n}\n\nexport {WPMContextProvider, WPMContext}\n","import React, {useState} from \"react\"\n\nconst FrequencyContext = React.createContext()\n\nfunction FrequencyContextProvider(props) {\n    \n    const [frequency, setFrequency] = useState(650)\n\n    return (\n        <FrequencyContext.Provider value={{\n            frequency: Number(frequency),\n            setFrequency: setFrequency}\n        }>\n            {props.children}\n        </FrequencyContext.Provider>\n    )\n}\n\nexport {FrequencyContextProvider, FrequencyContext}\n","import React, {useState} from \"react\"\n\nconst KeyTypeContext = React.createContext()\n\nfunction KeyTypeContextProvider(props) {\n\n    const [keyType, setKeyType] = useState('straight')\n\n    return (\n        <KeyTypeContext.Provider value={{\n            keyType: keyType,\n            setKeyType: setKeyType\n            }}>\n            {props.children}\n        </KeyTypeContext.Provider>\n    )\n}\n\nexport {KeyTypeContextProvider, KeyTypeContext}\n","import {useEffect, useContext} from 'react'\nimport { FrequencyContext } from '../contexts/frequencyContext'\nimport { GameModeContext } from '../contexts/gameModeContext'\nimport { MorseBufferContext } from '../contexts/morseBufferContext'\nimport { WPMContext } from '../contexts/wpmContext'\nimport config from '../config.json'\n\n// ELECTRONIC KEY TELEGRAPH - Iambic A\n\nexport default (function useElectronicKey() {\n\n    const {morseCharBuffer, setMorseCharBuffer, morseWords, setMorseWords} = useContext(MorseBufferContext)\n    const {wpm} = useContext(WPMContext)\n    const {gameMode} = useContext(GameModeContext)\n    const {frequency} = useContext(FrequencyContext)\n\n    // DitDah length setup\n    let ditMaxTime = 1200/wpm\n    let ratio = .2\n    const letterGapMinTime = ditMaxTime*ratio*3\n    const wordGapMaxTime = ditMaxTime*ratio*7\n\n    const morseHistorySize = config.historySize\n    \n    let leftIsPressed = false\n    let rightIsPressed = false\n    let queueRunning = false\n    let queue = []\n    let pressedFirst = null\n    let lastPlayed = ''\n\n    // Timers setup\n    let depressSyncTime\n    let depressSyncTimer\n    let depressSyncTimerRunning = false\n    let gapTime = 0\n    let gapTimer = 0\n\n    let paddlesReleasedSimultaneously = false\n\n    let currentPromise = Promise.resolve()\n\n    // Audio Setup\n    let AudioContext = window.AudioContext || window.webkitAudioContext || false\n    let context\n    window.AudioContext = window.AudioContext || window.webkitAudioContext;\n    if (AudioContext) {\n        context = new AudioContext()\n    } else {\n        context = null\n    }\n\n    // Promisify playing Dits and Dahs\n    function play(ditDah) {\n        lastPlayed = ditDah\n        let playDuration = ((ditDah === '.') ? ditMaxTime : ditMaxTime*3)\n\n        return new Promise((resolve, reject) => {\n            if (context.state === 'interrupted') {\n                context.resume()\n            }\n            \n            let o = context.createOscillator()\n            o.frequency.value = frequency\n            o.type = \"sine\"\n            o.onended = () => {\n                resolve()\n            }\n            \n            let startTime = context.currentTime;\n    \n            let g = context.createGain()\n            g.gain.exponentialRampToValueAtTime(config.mainVolume, startTime)\n            g.gain.setValueAtTime(config.mainVolume, startTime)\n            o.connect(g)\n            g.connect(context.destination)\n            \n            o.start(startTime)\n            \n            setTimeout(() => {\n                g.gain.setTargetAtTime(0.0001, context.currentTime, 0.001)\n                o.stop(context.currentTime + 0.05)\n            }, playDuration)\n        })\n    }\n\n    // Play dit or dah with trailing space (silence)\n    function playWithSpaces(ditDah) {\n        let delay = (ditDah === '.') ? ditMaxTime + ditMaxTime : ditMaxTime*3 + ditMaxTime\n\n        return new Promise(function(resolve) {\n            if (ditDah === '.' || ditDah === '-') {\n\n                clearInterval(gapTimer)\n                checkGapBetweenInputs()\n                setMorseCharBuffer(prev => prev + ditDah)\n                \n                play(ditDah)\n                .then(setTimeout(() => {\n                    // START GAP TIMER\n                    gapTimer = setInterval(() => {\n                        gapTime += 1\n    \n                        // if (gapTime >= wordGapMaxTime) {\n                        if (gameMode === 'practice' && gapTime >= wordGapMaxTime) {\n                            setMorseCharBuffer(prev => prev + '/')\n                            clearInterval(gapTimer)\n                            gapTimer = 0\n                            gapTime = 0\n                        }\n                        else if (gameMode === 'challenge' && gapTime >= letterGapMinTime) {\n                            setMorseCharBuffer(prev => prev + '_')\n                            clearInterval(gapTimer)\n                            gapTimer = 0\n                            gapTime = 0\n                        }\n                    }, 1)\n                    \n                    resolve();\n                }, delay)\n                )\n            } else {\n                setTimeout(() => {\n                    resolve();\n                }, ditMaxTime*3)\n            }\n        });\n    }\n\n    function executeQueue() {\n        let localQueue = queue\n        \n        // Set waitTime to completion of queue (ditDah time + following silences)\n        let waitTime = 0\n        for (let i in localQueue) {\n            if (localQueue[i] === '.') {\n                waitTime += ditMaxTime*2\n            } else if (localQueue[i] === '-') {\n                waitTime += ditMaxTime*4\n            }\n        }\n        \n        // Cleanup\n        function cleanup() {\n            queueRunning = false\n            queue = []\n            sendPressedToQueue() // Check if anything still pressed down on queue finish\n        }\n        \n        // Wait till completion of queue to execute\n        const clear = setTimeout(() => {\n            cleanup()\n        }, waitTime)\n        \n        // Execute queue\n        queueRunning = true\n        for (let i = 0; i < localQueue.length; i++) {\n            if (paddlesReleasedSimultaneously) {\n                localQueue.pop()\n                clearTimeout(clear)\n                cleanup()\n            }\n            currentPromise = currentPromise.then(() => {\n                var ditDah = localQueue[i]\n                if (ditDah)\n                {\n                    return playWithSpaces(ditDah)\n                }\n            });\n        }\n    }\n\n    // Determine which paddles are pressed, add to queue, and execute\n    function sendPressedToQueue() {\n        if (leftIsPressed && rightIsPressed) {\n            if (pressedFirst === 'left') {\n                queue.push('-')\n                pressedFirst = null\n            } else {\n                queue.push('.')\n                queue.push('-')\n            }\n        }\n        else if (leftIsPressed && !rightIsPressed) {\n            queue.push('.')\n        }\n        else if (rightIsPressed && !leftIsPressed) {\n            queue.push('-')\n        }\n        if (queue.length > 0) {\n            executeQueue()\n        }\n    }\n\n\n    function handleInputStart(event) {\n        if (event.type === 'touchstart') {\n            event.preventDefault()\n        }\n\n        paddlesReleasedSimultaneously = false\n\n        if (event.keyCode === 188 || event.keyCode === 190) {\n            if (document.activeElement.id === 'morseInput') {\n                return\n            } else if (document.activeElement.tagName.toLowerCase() !== 'body') {\n                event.preventDefault()\n                document.activeElement.blur()\n            }\n        }\n        if (event.repeat) { return }\n\n        if (event.keyCode === 188 || event.target.id === \"left\") {\n            document.querySelector('.paddle#left').classList.add('active')\n            \n            leftIsPressed = true\n            if (!rightIsPressed) { pressedFirst = 'left'}\n\n            // Prevent further input if queue is executing\n            if (!queueRunning) {\n                sendPressedToQueue()\n            }\n        }\n        else if (event.keyCode === 190 || event.target.id === \"right\") {\n            document.querySelector('.paddle#right').classList.add('active')\n\n            rightIsPressed = true\n            if (!leftIsPressed) { pressedFirst = 'right'}\n\n            // Prevent further input if queue is executing\n            if (!queueRunning) {\n                sendPressedToQueue()\n            }\n        }\n    }\n\n    function handleInputEnd(event) {\n        if (event.type === 'touchend') {\n            event.preventDefault()\n        }\n\n        if (event.keyCode === 188 || event.target.id === \"left\") {\n            document.querySelector('.paddle#left').classList.remove('active')\n\n            leftIsPressed = false\n            if (pressedFirst === 'left') { pressedFirst = null }\n\n            if (!depressSyncTimerRunning) { startDepressSyncTimer() }\n            else { stopDepressSyncTimer() }\n        }\n        if (event.keyCode === 190 || event.target.id === \"right\") {\n            document.querySelector('.paddle#right').classList.remove('active')\n\n            rightIsPressed = false\n            if (pressedFirst === 'right') { pressedFirst = null }\n\n            if (!depressSyncTimerRunning) { startDepressSyncTimer() }\n            else { stopDepressSyncTimer() }\n        }\n\n        if (paddlesReleasedSimultaneously && document.getElementById('modeB').classList.contains('selected'))\n        {\n            currentPromise = currentPromise.then(() => {\n                return playWithSpaces(lastPlayed == '.' ? '-' : '.')\n            });\n        }\n    }\n    \n    // Timer used to determine if both paddles are released within 10ms\n    // Need to know this to stop Iambic tones at correct time\n    function startDepressSyncTimer() {\n        depressSyncTimerRunning = true\n        // Reset depressSyncTime\n        depressSyncTime = 0\n        // Start depressSyncTimer\n        depressSyncTimer = setInterval(() => {\n            depressSyncTime += 1\n            if (depressSyncTime > 20) {\n                depressSyncTimerRunning = false\n                clearInterval(depressSyncTimer)\n                depressSyncTime = 0\n            }\n        }, 1);\n    }\n    function stopDepressSyncTimer() {\n        depressSyncTimerRunning = false\n        clearInterval(depressSyncTimer)\n        if (depressSyncTime < 10) {\n            paddlesReleasedSimultaneously = true\n            queue.pop()\n        }\n        depressSyncTime = 0\n    }\n\n\n    // Check gap between letters to determin if new character or new word\n    function checkGapBetweenInputs() {\n        if (gapTime >= letterGapMinTime && gapTime < wordGapMaxTime) {\n            if (gameMode === 'practice') {\n                setMorseCharBuffer(prev => prev + ' ')\n            } else if (gameMode === 'challenge') {\n                setMorseCharBuffer(prev => prev + '_')\n            }\n            gapTime = 0\n            clearInterval(gapTimer)\n            gapTimer = 0\n        }\n    }\n\n    // Add paddle event listeners and update on WPM, Game Mode, or Frequency change\n    // Not updating on these state changes prevents change from taking effect\n    useEffect(() => {\n        document.addEventListener('keydown', handleInputStart)\n        document.addEventListener('keyup', handleInputEnd)\n\n        const paddles = document.querySelectorAll('.paddle')\n        paddles.forEach(paddle => {\n            paddle.addEventListener('mousedown', handleInputStart)\n            paddle.addEventListener('touchstart', handleInputStart)\n            paddle.addEventListener('mouseout', handleInputEnd)\n            paddle.addEventListener('mouseup', handleInputEnd)\n            paddle.addEventListener('touchend', handleInputEnd)\n        })\n\n        return function cleanup() {\n            document.removeEventListener('keydown', handleInputStart)\n            document.removeEventListener('keyup', handleInputEnd)\n\n            const paddles = document.querySelectorAll('.paddle')\n            paddles.forEach(paddle => {\n                paddle.removeEventListener('mousedown', handleInputStart)\n                paddle.removeEventListener('touchstart', handleInputStart)\n                paddle.removeEventListener('mouseout', handleInputEnd)\n                paddle.removeEventListener('mouseup', handleInputEnd)\n                paddle.removeEventListener('touchend', handleInputEnd)\n            })\n\n            clearInterval(depressSyncTimer)\n            clearInterval(gapTimer)\n        }\n        // eslint-disable-next-line\n    }, [wpm, gameMode, frequency])\n\n    // Remove forward slash and move buffer contents to morse words array\n    useEffect(() => {\n        if (morseCharBuffer.slice(-1) === '/' && gameMode === 'practice') {\n            let val = morseCharBuffer.slice(0,morseCharBuffer.length-1)\n            setMorseWords(prev => [val, ...prev])\n\n            // Limit history to configured history size\n            if (morseWords.length >= morseHistorySize) {\n                setMorseWords(prev => prev.slice(0,prev.length-1))\n            }\n            setMorseCharBuffer('')\n        }\n\n        // eslint-disable-next-line\n    }, [morseCharBuffer])\n\n})","import React from \"react\"\nimport useElectronicKey from '../hooks/useElectronicKey';\n\nexport default React.memo(function ElectronicKey() {\n    useElectronicKey()\n})","import React from \"react\"\n\nexport default (function DitDahDisplay(props) {\n\n    return (props.dd === ' ') ? <div className='ditDah'>&nbsp;</div> : <div className='ditDah'>{props.dd}</div>\n})","import React, { useContext } from \"react\"\nimport { MorseBufferContext } from \"../contexts/morseBufferContext\"\nimport DitDahDisplay from \"./DitDahDisplay\"\nimport morseCode from '../data/morse-reverse.json'\n\nexport default React.memo(function MorseBufferDisplay() {\n    \n    const {morseCharBuffer} = useContext(MorseBufferContext)\n\n    let ditDahs = morseCharBuffer.split('').map((ditdah,index) => <DitDahDisplay key={index} dd={ditdah} />)\n    let alphanumeric = ''\n    let letters = morseCharBuffer.split(' ')\n\n    if (morseCharBuffer === '') {}\n    else {\n        for (let i in letters) {\n            if (letters[i] === ' ') {\n                alphanumeric += ' '\n            } else {\n                if (morseCode[letters[i]] === undefined) {\n                    alphanumeric += (letters[i] === '' ? '':'[?]')\n                } else {\n                    alphanumeric += morseCode[letters[i]]\n                }\n            }\n        }\n    }\n\n    return (\n        <div id=\"morseBufferDisplay\">\n            <div id=\"overlay\"></div>\n            <div id=\"ditDahs-container\">\n                <div id=\"ditDahs\">\n                    {ditDahs}\n                </div>\n            </div>\n            <div id=\"alphanumeric-container\">\n                <div id=\"alphanumeric\">\n                    {alphanumeric.toUpperCase()}\n                </div>\n            </div>\n        </div>\n    )\n})","import React, {useContext} from \"react\"\nimport { MorseBufferContext } from \"../contexts/morseBufferContext\"\nimport morseCode from '../data/morse-reverse.json'\n\nexport default (function MorseHistoryTextBox() {\n\n    const {morseWords, setMorseWords} = useContext(MorseBufferContext)\n\n    let text = ''\n\n    function clearHistory() {\n        setMorseWords([])\n    }\n\n    // Generate Morse History contents\n    morseWords.forEach((word, index) => {\n        if (word.includes(' ')) {\n            let newWord = ''\n            word.split(' ').forEach(letter => {\n                if (morseCode[letter] === undefined) {\n                    newWord += '[?]'\n                } else {\n                    newWord += morseCode[letter].toUpperCase()\n                }\n            })\n            text = newWord + ' ' + text\n        }\n        else if (morseCode[word] === undefined) {\n            text = '[?] ' + text\n        } else {\n            text =  morseCode[word].toUpperCase() + ' ' + text\n        }\n    })\n\n    return (\n        <div id=\"morse-history\">\n            <div id=\"morseHistory-textbox\">{text}</div>\n            <div id=\"clear\">\n                <span id=\"message\">\"<span className=\"ditDah\">[?]</span>\" signifies no translation available.</span>\n                <button id=\"clear-history\" onClick={clearHistory}>Clear</button>\n            </div>\n        </div>\n    )\n})","import { useEffect, useContext } from 'react'\nimport { FrequencyContext } from '../contexts/frequencyContext'\nimport { GameModeContext } from '../contexts/gameModeContext'\nimport { MorseBufferContext } from '../contexts/morseBufferContext'\nimport { WPMContext } from '../contexts/wpmContext'\nimport config from '../config.json'\n\n// STRAIGHT KEY TELEGRAPH\nexport default (function useStraightKey() {\n    \n    const {morseCharBuffer, setMorseCharBuffer, morseWords, setMorseWords} = useContext(MorseBufferContext)\n    const {wpm} = useContext(WPMContext)\n    const {gameMode} = useContext(GameModeContext)\n    const {frequency} = useContext(FrequencyContext)\n\n    // Spacing time and timer setup\n    let charTimer = 0\n    let charTime = 0\n    let gapTimer = 0\n    let gapTime = 0\n    \n    // DitDah Length\n    const ditMaxTime = 1200/wpm * 0.3\n    const letterGapMinTime = ditMaxTime*3\n    const wordGapMaxTime = ditMaxTime*7\n\n    const morseHistorySize = config.historySize\n\n    // Tone Setup\n    let AudioContext = window.AudioContext || window.webkitAudioContext || false\n    let context\n    window.AudioContext = window.AudioContext || window.webkitAudioContext;\n    if (AudioContext) {\n        context = new AudioContext()\n    } else {\n        context = null\n    }\n\n    let o // Oscillator Node\n    let g // Gain Node\n\n    let isRunning = false\n\n    function handleInputStart(event) {\n        if (event.type === 'touchstart') {\n            event.preventDefault()\n        }\n\n        if (event.keyCode === 32) {\n            if (document.activeElement.id === 'morseInput') {\n                return\n            }\n            else if (document.activeElement.tagName.toLowerCase() !== 'body') {\n                event.preventDefault()\n                document.activeElement.blur()\n            }\n        }\n\n        if (isRunning) {\n            return\n        } else {\n            isRunning = true\n\n            if ((event.keyCode !== 32 &&\n                event.target.id !== \"morseButton\" &&\n                event.target.className !== \"paddle\") ||\n                (event.repeat)) {\n                return\n            }\n            else {\n                document.getElementById('morseButton').classList.add('active')\n    \n                // isRunning = true\n    \n                if (context.state === 'interrupted') {\n                    context.resume()\n                }\n                \n                o = context.createOscillator()\n                o.frequency.value = frequency\n                o.type = \"sine\"\n                \n                g = context.createGain()\n                g.gain.exponentialRampToValueAtTime(config.mainVolume, context.currentTime)\n                o.connect(g)\n                g.connect(context.destination)\n                o.start()\n                 \n                checkGapBetweenInputs()\n                clearInterval(gapTimer)\n    \n                startCharTimer()\n            }\n        }\n        \n    }\n    \n    function startCharTimer() {\n        // Start Character Timer\n        charTimer = setInterval(() => {\n            charTime += 1\n        }, 1);\n    }\n\n    function handleInputEnd(event) {\n        if (isRunning) {\n            if ((event.keyCode !== 32 &&\n                event.target.id !== \"morseButton\" &&\n                event.target.className !== \"paddle\") ||\n                (event.repeat)) {\n                return\n            }\n\n            document.getElementById('morseButton').classList.remove('active')\n\n            isRunning = false\n            \n            if (charTime <= ditMaxTime) {\n                setMorseCharBuffer(prev => prev + '.')\n            } else {\n                setMorseCharBuffer(prev => prev + '-')\n            }\n    \n            stopCharTimer()\n            startGapTimer()\n            \n            // Account for bug triggered when pressing paddle button (e.g.) outside of body, then clicking into body, and depressing key\n            if (o === undefined) { \n                return\n            }\n            if (o.context.state === 'running') {\n                g.gain.setTargetAtTime(0.0001, context.currentTime, 0.001)\n                o.stop(context.currentTime + 0.05)\n            }\n        } else { return }\n    }\n\n    function stopCharTimer() {    \n        clearInterval(charTimer)\n        charTimer = 0\n        charTime = 0\n    }\n\n    function startGapTimer() {\n        gapTime = 0\n        gapTimer = setInterval(() => {\n            gapTime += 1\n\n            // Gap between words\n            if (gameMode === 'practice' && gapTime >= wordGapMaxTime) {\n                setMorseCharBuffer(prev => prev + '/')\n                clearInterval(gapTimer)\n                gapTimer = 0\n                gapTime = 0\n            }\n            else if (gameMode === 'challenge' && gapTime >= letterGapMinTime) {\n                setMorseCharBuffer(prev => prev + '_')\n                clearInterval(gapTimer)\n                gapTimer = 0\n                gapTime = 0\n            }\n        }, 1);\n    }\n\n    // Check gap between letters to determin if new character or new word\n    function checkGapBetweenInputs() {\n        if (gapTime >= letterGapMinTime && gapTime < wordGapMaxTime) {\n            if (gameMode === 'practice') {\n                setMorseCharBuffer(prev => prev + ' ')\n            } else if (gameMode === 'challenge') {\n                setMorseCharBuffer(prev => prev + '_')\n            }\n            clearInterval(gapTimer)\n            gapTimer = 0\n        }\n    }\n    \n    // Add paddle event listeners and update on WPM, Game Mode, or Frequency change\n    // Not updating on these state changes prevents change from taking effect\n    useEffect(() => {\n        document.addEventListener('keydown', handleInputStart)\n        document.addEventListener('keyup', handleInputEnd)\n\n        const morseButton = document.getElementById('morseButton')\n        morseButton.addEventListener('touchstart', handleInputStart)\n        morseButton.addEventListener('touchend', handleInputEnd)\n        morseButton.addEventListener('mousedown', handleInputStart)\n        morseButton.addEventListener('mouseout', handleInputEnd)\n        morseButton.addEventListener('mouseup', handleInputEnd)\n\n        return function cleanup() {\n            document.removeEventListener('keydown', handleInputStart)\n            document.removeEventListener('keyup', handleInputEnd)\n\n            const morseButton = document.getElementById('morseButton')\n            morseButton.removeEventListener('touchstart', handleInputStart)\n            morseButton.removeEventListener('touchend', handleInputEnd)\n            morseButton.removeEventListener('mousedown', handleInputStart)\n            morseButton.removeEventListener('mouseout', handleInputEnd)\n            morseButton.removeEventListener('mouseup', handleInputEnd)\n\n            clearInterval(charTimer)\n            clearInterval(gapTimer)\n        }\n        // eslint-disable-next-line\n    }, [wpm, gameMode, frequency])\n\n    // Remove forward slash and move buffer contents to morse words array\n    useEffect(() => {\n        if (morseCharBuffer.slice(-1) === '/' && gameMode === 'practice') {\n            let val = morseCharBuffer.slice(0,morseCharBuffer.length-1)\n            setMorseWords(prev => [val, ...prev])\n\n            // Limit history to configured history size\n            if (morseWords.length >= morseHistorySize) {\n                setMorseWords(prev => prev.slice(0,prev.length-1))\n            }\n            setMorseCharBuffer('')\n\n            // Scroll morse history textbox to bottom (scrolling enabled on mobile screens)\n            let morseHistory = document.getElementById(\"morseHistory-textbox\");\n            morseHistory.scrollTop = morseHistory.scrollHeight;\n        }\n\n        // eslint-disable-next-line\n    }, [morseCharBuffer])\n\n})","import React from \"react\"\nimport useStraightKey from '../hooks/useStraightKey';\n\nexport default React.memo(function StraightKey() {\n    useStraightKey()\n})","import React, { useContext } from 'react';\nimport '../css/App.css';\nimport { KeyTypeContext } from '../contexts/keyTypeContext';\nimport ElectronicKey from '../components/ElectronicKey';\nimport MorseBufferDisplay from '../components/MorseBufferDisplay'\nimport MorseHistoryTextBox from '../components/MorseHistory'\nimport StraightKey from '../components/StraightKey';\n\n\nexport default (function PracticeMode() {\n\n    const {keyType} = useContext(KeyTypeContext)\n\n    return (\n        <>\n            {keyType === \"straight\" ?\n                <StraightKey /> : <ElectronicKey />\n            }\n            <MorseBufferDisplay /><br/>\n            <MorseHistoryTextBox />\n        </>\n    );\n\n  \n})","import React from \"react\"\n\nexport default React.memo(function ChallengeBufferDisplay(props) {\n\n    const morseArray = props.morseArray\n\n    let ditDahs = []\n\n    for (let i in morseArray) {\n        let morseChar = morseArray[i]\n        \n        ditDahs.push(<span key={i}>{morseChar}</span>)\n    }\n\n    return (\n        <div id=\"challengeBufferDisplay\">\n            <div id=\"ditDahs\">\n                {ditDahs}\n            </div>\n        </div>\n    )\n})","import React from \"react\"\n\nexport default (function ChallengeControls(props) {\n\n    return (\n        <div id=\"challengeControls\">\n            <button onClick={props.cancelChallenge}>Exit Challenge</button>\n        </div>\n    )\n})","import React, { useContext } from \"react\"\nimport { WordFeederContext } from \"../contexts/wordFeederContext\"\n\nexport default React.memo(function ChallengeWord(props) {\n\n    const {word} = useContext(WordFeederContext)\n\n    let challengeLetters\n    if (typeof word === 'object') {\n        challengeLetters = word[0].split('')\n    }\n    else {\n        challengeLetters = word.split('')\n    }\n\n    let spannedWord = challengeLetters.map((letter,index) => <span key={index} className='cLetter'>{letter}</span>)\n\n    return (\n        <div id=\"challengeWord\" className={props.challengeWordClass}>{spannedWord}</div>\n    )\n})","import React, {useContext} from \"react\"\nimport { GameClockContext } from \"../contexts/gameClockContext\";\n\nexport default (function GameClock(props) {\n    \n    const {gameClockTime} = useContext(GameClockContext)\n\n    const minutes = Math.floor(gameClockTime / 60)\n    const seconds = gameClockTime % 60\n\n    return (\n        <div id=\"gameClock\">Time Elapsed: <span id=\"clockTime\">{minutes} minutes {seconds} seconds</span></div>\n    )\n})","import React, {useContext} from 'react';\nimport '../css/App.css';\nimport { ChallengeContext } from '../contexts/challengeContext';\nimport { KeyTypeContext } from '../contexts/keyTypeContext';\nimport ChallengeBufferDisplay from '../components/ChallengeBufferDisplay';\nimport ChallengeControls from '../components/ChallengeControls';\nimport ChallengeWord from '../components/ChallengeWord'\nimport ElectronicKey from '../components/ElectronicKey';\nimport GameClock from '../components/GameClock';\nimport StraightKey from '../components/StraightKey';\n\n\nexport default React.memo(function ChallengeMode() {\n    \n    const {keyType} = useContext(KeyTypeContext)\n    const {challengeState, cancelChallenge, morseArray, challengeWordClass} = useContext(ChallengeContext)\n\n    return (\n        <>\n            {challengeState === 'started' ? (keyType === \"straight\" ?\n                <StraightKey /> : <ElectronicKey />) : <></>\n            }\n            <div id=\"challenge-header\">\n                <GameClock />\n                <ChallengeControls cancelChallenge={cancelChallenge} />\n            </div>\n            <ChallengeWord challengeWordClass={challengeWordClass} />\n            <ChallengeBufferDisplay morseArray={morseArray} />\n        </>\n    )\n});\n","import React, {useContext} from \"react\"\nimport { ChallengeContext } from \"../contexts/challengeContext\"\nimport { GameClockContext } from \"../contexts/gameClockContext\"\nimport { GameModeContext } from \"../contexts/gameModeContext\"\nimport { MorseBufferContext } from \"../contexts/morseBufferContext\"\nimport { WordFeederContext } from \"../contexts/wordFeederContext\"\n\nexport default React.memo(function ModePicker() {\n\n    const {setGameMode} = useContext(GameModeContext)\n    const {setMorseCharBuffer} = useContext(MorseBufferContext)\n    const {resetFeeder} = useContext(WordFeederContext)\n    const {stopGameClock, setGameClockTime, clockIsRunning} = useContext(GameClockContext)\n    const {setChallengeState} = useContext(ChallengeContext)\n\n    function handleClick(e) {\n        setMorseCharBuffer('')\n        resetFeeder()\n        setChallengeState('ready')\n\n        setGameMode(e.target.id)\n\n        if (clockIsRunning) { \n            stopGameClock()\n            setGameClockTime(0)\n        }\n\n        let buttons = document.querySelector(\".mode-picker#gameMode #buttons\").childNodes\n        buttons.forEach(button => {\n            if (button.id === e.target.id) {\n                button.classList.add('selected')\n            } else { button.classList.remove('selected')}\n        })\n    }\n\n    return (\n        <div id=\"gameMode\" className=\"mode-picker\">\n            <div id=\"title\">\n                Mode\n            </div>\n            <div id='buttons'>\n                <button id=\"practice\" className=\"selected\" onClick={handleClick}>\n                    Practice Mode\n                </button>\n                <button id=\"challenge\" onClick={handleClick}>\n                    Challenge Mode\n                </button>\n            </div>\n        </div>\n    )\n})","import React, {useContext, useEffect} from \"react\"\nimport {KeyTypeContext} from \"../contexts/keyTypeContext\"\n\n\nexport default React.memo(function KeyTypePicker() {\n\n    const {setKeyType, keyType} = useContext(KeyTypeContext)\n\n    function handleClick(e) {\n        setKeyType(e.target.id)\n        switch (e.target.id)\n        {\n            case 'straight':\n                e.target.classList.add('selected');\n                document.getElementById('electronic').classList.remove('selected')\n                document.querySelector('#morseButton').classList.remove('showPaddles')\n                document.querySelector('.paddle').classList.remove('showPaddles')\n                document.querySelector('.paddle#left').classList.remove('showPaddles')\n                document.querySelector('.paddle#right').classList.remove('showPaddles')\n                document.getElementById('paddle-mode-buttons').style.visibility = 'hidden'\n                document.getElementById('morseButtonText').innerHTML = 'TAP BUTTON OR PRESS SPACEBAR'\n                break;\n            case 'electronic':\n                e.target.classList.add('selected');\n                document.getElementById('straight').classList.remove('selected')\n                document.querySelector('#morseButton').classList.add('showPaddles')\n                document.querySelector('.paddle').classList.add('showPaddles')\n                document.querySelector('.paddle#left').classList.add('showPaddles')\n                document.querySelector('.paddle#right').classList.add('showPaddles')\n                document.getElementById('paddle-mode-buttons').style.visibility = 'visible'\n                document.getElementById('morseButtonText').innerHTML = 'TAP/HOLD BUTTONS OR PRESS COMMA / PERIOD'\n                break\n            case 'modeA':\n                e.target.classList.add('selected')\n                document.getElementById('modeB').classList.remove('selected')\n                break;\n            case 'modeB':\n                e.target.classList.add('selected')\n                document.getElementById('modeA').classList.remove('selected')\n                break;\n        }\n    }\n\n    useEffect(() => {\n        document.querySelector(`button#${keyType}`).classList.add('selected')\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <div id=\"keyType\" className=\"mode-picker\">\n            <div id=\"title\">\n                Key Type\n            </div>\n            <div id=\"key-type-buttons\">\n                <button id=\"straight\" onClick={handleClick}>\n                    Straight Key\n                </button>\n                <button id=\"electronic\" onClick={handleClick}>\n                    Electronic Key\n                </button>\n            </div>\n            <div id=\"paddle-mode-buttons\">\n                <fieldset id=\"paddle-mode\">\n                    <legend>Paddle Mode</legend>\n                    <button id=\"modeA\" class=\"selected\" onClick={handleClick}>\n                        A\n                    </button>\n                    <button id=\"modeB\" onClick={handleClick}>\n                        B\n                    </button>\n                    <br />\n                </fieldset>\n            </div>\n        </div>\n    )\n})","const shareLinks = {\n    'twitter': {\n        name: 'Twitter',\n        icon: 'ri-twitter-fill',\n        link:'https://twitter.com/intent/tweet?text=Check%20out%20this%20site%20that%20helps%20you%20learn%20Morse%20Code%3A%20https%3A//learnmorsecode.net%20%40genemecija%20%23morse%20%23morsecode'\n    },\n    'facebook': {\n        name: 'Facebook',\n        icon: 'ri-facebook-box-fill',\n        link: 'https://www.facebook.com/sharer/sharer.php?u=https%3A//learnmorsecode.net'\n    },\n    'email': {\n        name: 'Email',\n        icon: \"ri-mail-line\",\n        link: 'mailto:?subject='+encodeURIComponent('Check out this site that helps you learn Morse code! https://learnmorsecode.net')\n    }\n}\nconst contactLinks = {\n    'email': {\n        name: 'Email',\n        icon: \"ri-mail-line\",\n        link: 'mailto:gene@genemecija.com?subject='+encodeURIComponent('Hello, Gene!')\n    },\n    'github': {\n        name: 'GitHub',\n        icon: 'ri-github-fill',\n        link: 'https://github.com/genemecija/learn-morse-code/'\n    },\n    'twitter': {\n        name: 'Twitter',\n        icon: 'ri-twitter-fill',\n        link:'https://twitter.com/genemecija'\n    }\n}\n\nexport {shareLinks, contactLinks}","import React from \"react\"\nimport { shareLinks } from \"../data/social\"\n\nexport default (function Header () {\n\n    function PopupCenter(url, title, w, h) {  \n        // Credit: http://www.xtf.dk/2011/08/center-new-popup-window-even-on.html\n    \n        // Fixes dual-screen position                         Most browsers      Firefox  \n        const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screen.left;  \n        const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screen.top;  \n                  \n        const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;  \n        let height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;  \n                  \n        const left = ((width / 2) - (w / 2)) + dualScreenLeft;  \n        const top = ((height / 2) - (h / 2)) + dualScreenTop;  \n        const newWindow = window.open(url, title, 'scrollbars=yes, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);  \n      \n        // Puts focus on the newWindow  \n        if (window.focus) {  \n            newWindow.focus();  \n        }  \n    }\n    \n    function handleClick(event) {\n        let link = event.target.id\n        let url = shareLinks[link]['link']\n        let title = 'Share'\n        let width = '900'\n        let height = '500'\n        if (link === 'email') {\n            width = '150'\n            height = '150'\n        }\n        PopupCenter(url, title, width, height)\n    }\n\n    let contacts = Object.keys(shareLinks).map((contact, index) => {\n        return (\n            <i id={contact} key={index} onClick={handleClick} className={shareLinks[contact]['icon']}></i> \n        )\n    })\n\n    return (\n        <div id=\"header\">\n            <div id=\"title\">\n                Learn Morse Code\n            </div>\n            <div id=\"social-links\">\n                Share: <span id=\"share-icons\">{contacts}</span>\n            </div>\n        </div>\n    )\n})","import { useContext } from 'react';\nimport config from '../config.json'\nimport { WPMContext } from '../contexts/wpmContext.js';\nimport { FrequencyContext } from '../contexts/frequencyContext.js';\n\nexport default (function useMorsePlayer() {\n\n    const {wpm} = useContext(WPMContext)\n    const {frequency} = useContext(FrequencyContext)\n    // const ditMaxTime = 85 //config.ditMaxTime\n    const ditMaxTime = 1200/wpm\n\n    // Tone Setup\n    let AudioContext = window.AudioContext || window.webkitAudioContext\n    window.AudioContext = window.AudioContext || window.webkitAudioContext;\n    let context\n    if (AudioContext) {\n        context = new AudioContext()\n    } else {\n        context = null\n    }\n\n    // Play dit or dah\n    function play(ditDah) {\n        let length = ((ditDah === '.') ? ditMaxTime : ditMaxTime*3)\n        \n        if (context.state === 'interrupted') {\n            context.resume()\n        }\n        let o\n        o = context.createOscillator()\n        o.frequency.value = frequency\n        o.type = \"sine\"\n        \n        let startTime = context.currentTime;\n\n        let g = context.createGain()\n        g.gain.exponentialRampToValueAtTime(config.mainVolume, startTime)\n        g.gain.setValueAtTime(config.mainVolume, startTime)\n        o.connect(g)\n        g.connect(context.destination)\n        o.start(startTime)\n        \n        setTimeout(() => {\n            g.gain.setTargetAtTime(0.0001, context.currentTime, 0.009)\n            o.stop(context.currentTime + 0.05)\n        }, length)\n    }\n\n    let queue = []\n    let timeouts = []\n    \n    function playMorseWord(morse) {\n        // Empty morse queue and cancel all sounds (timeouts)\n        queue = []\n        for (let i = 0; i < timeouts.length; i++) {\n            clearTimeout(timeouts[i]);\n        }\n\n        queue = Array.from(morse)\n        let delay = 0\n        let firstWord = true\n\n        // Iterate through queue, playing dits/dahs sequentially after appropriate delays\n        for (let i = 0; i < queue.length; i++) {\n            let char = queue[i]\n            if (char === '.') {\n                if (firstWord) {\n                    firstWord = false\n                    timeouts.push(setTimeout(() => {\n                        play(char)\n                    }, 0))\n                } else {\n                    timeouts.push(setTimeout(() => {\n                        play(char)\n                    }, delay))\n                }\n                delay += ditMaxTime*2\n            } else if (char === '-') {\n                if (firstWord) {\n                    firstWord = false\n                    timeouts.push(setTimeout(() => {\n                        play(char)\n                    }, 0))\n                } else {\n                    timeouts.push(setTimeout(() => {\n                        play(char)\n                    }, delay))\n                }\n                delay += ditMaxTime*4\n            } else if (char === ' ') {\n                timeouts.push(setTimeout(() => {\n                    \n                }, delay))\n                delay += ditMaxTime*2\n            } else if (char === '/') {\n                timeouts.push(setTimeout(() => {\n                    \n                }, delay))\n                delay += ditMaxTime*6\n            }\n        }\n    }\n\n    return { playMorseWord, play }\n})","import React, {useContext} from \"react\"\nimport { WPMContext } from \"../contexts/wpmContext\";\nimport useMorsePlayer from \"../hooks/useMorsePlayer\";\n\nexport default React.memo(function WordsPerMinute() {\n\n    const {wpm, setWPM} = useContext(WPMContext)\n    const {playMorseWord} = useMorsePlayer()\n\n    const minWPM = 5\n    const maxWPM = 30\n\n    function handleChange(e) {\n        if (Number(e.target.value) > maxWPM) {\n            setWPM(maxWPM)\n        } else if (Number(e.target.value) < minWPM) {\n            setWPM(minWPM)\n        } else {\n            setWPM(Number(e.target.value))\n        }\n    }\n\n    function increment() {\n        setWPM(prevWPM => {\n            if (prevWPM + 1 <= maxWPM) {\n                return (prevWPM + 1)\n            } else {\n                return maxWPM\n            }\n        })\n    }\n    function decrement() {\n        setWPM(prevWPM => {\n            if (prevWPM - 1 >= minWPM) {\n                return (prevWPM - 1)\n            } else {\n                return minWPM\n            }\n        })\n    }\n    \n    return (\n        <div id='wpm' className='mode-picker'>\n            <div id='title'>\n                WPM <span id=\"range\">({minWPM}-{maxWPM})</span>\n            </div>\n            <div id='input'>\n                <button id='wpm-down' onClick={decrement}><i className=\"ri-arrow-down-s-line\"></i></button>\n                <input type=\"number\" name=\"wpm\" id='wpm-input' min=\"5\" max=\"30\" value={wpm} onChange={handleChange}></input>\n                <button id='wpm-up' onClick={increment}><i className=\"ri-arrow-up-s-line\"></i></button>\n                Test&nbsp;<i className=\"ri-volume-up-fill\" onClick={() => playMorseWord('.....')}></i>\n            </div>\n        </div>\n    )\n})","import React from \"react\"\n\nexport default React.memo(function MorseButtons() {\n\n    return (\n        <>\n            <div id=\"morseButton\">\n                <button className=\"paddle\" id=\"left\"></button>\n                <button className=\"paddle\" id=\"right\"></button>\n            </div>\n            <div id=\"morseButtonText\">\n                TAP BUTTON OR PRESS SPACEBAR\n            </div>\n        </>\n    )\n})","import React from \"react\"\nimport { contactLinks } from \"../data/social\"\n\nexport default (function Footer() {\n\n    function handleClick(event) {\n        window.open(contactLinks[event.target.id]['link'])\n    }\n    \n    return (\n        <div id=\"footer\">\n            app by @genemecija&nbsp;<span id=\"contact-icons\"><i id=\"twitter\" onClick={handleClick} className={contactLinks['twitter']['icon']}></i></span>•\n            contact&nbsp;<span id=\"contact-icons\"><i id=\"email\" onClick={handleClick} className={contactLinks['email']['icon']}></i></span>&nbsp;•\n            code&nbsp;<span id=\"contact-icons\"><i id=\"github\" onClick={handleClick} className={contactLinks['github']['icon']}></i></span>\n        </div>\n    )\n})","import React, {useContext} from \"react\"\nimport { WordListPickerContext } from \"../contexts/wordListPickerContext\";\nimport { WordFeederContext } from \"../contexts/wordFeederContext\";\n\nexport default React.memo(function WordCountPicker() {\n\n    const {setWordListCount, wordListCountMax} = useContext(WordListPickerContext)\n    const {resetFeeder} = useContext(WordFeederContext)\n\n    function handleChange(e) {\n        resetFeeder()\n        setWordListCount(e.target.value)\n    }\n\n    // Create Options for Select element\n    let options = []\n    for (let i = 0; i < wordListCountMax; i++) {\n        options.push(<option value={i+1} key={i}>{i+1}</option>)\n    }\n    \n    return (\n        <div id='word-count' className='mode-picker'>\n            <div id='title'>\n                Challenge Word Count: <span id=\"range\">(1-{wordListCountMax})</span>\n            </div>\n            <div id=\"input\">\n                <select id=\"wordCount-picker\" defaultValue={wordListCountMax} onChange={handleChange}>\n                    {options}\n                </select>\n            </div>\n        </div>\n    )\n})","import React, {useContext} from \"react\"\nimport { WordListPickerContext } from \"../contexts/wordListPickerContext\";\nimport { WordFeederContext } from \"../contexts/wordFeederContext\";\nimport WordCountPicker from \"./WordCountPicker\";\n\nexport default React.memo(function WordListPicker() {\n\n    const {wordListCategory, setWordListCategory, metadata} = useContext(WordListPickerContext)\n    const {resetFeeder, setOrder} = useContext(WordFeederContext)\n\n    const orderOpts = ['sequential', 'random']\n\n    function handleClick(e) {\n        resetFeeder()\n\n        // Handle Word List Order selection\n        if (orderOpts.includes(e.target.id)) {\n            let buttons = document.querySelector(\".mode-picker#wordOrderPicker #buttons\").childNodes\n            buttons.forEach(button => {\n                if (button.id === e.target.id) {\n                    button.classList.add('selected')\n                } else { button.classList.remove('selected')}\n            })\n            setOrder(e.target.id)\n        }\n        // Handle Word List Category selection\n        else {\n            setWordListCategory(e.target.value)\n        }\n    }\n\n    let wordLists = Object.keys(metadata)\n    // Create Option elements for Select element\n    let options = wordLists.map((wl, index) => (<option value={wl} key={index}>{metadata[wl]['name']}</option>))\n\n    return (\n        <div id=\"challengeOptions\">\n            <div id=\"wordListPicker\" className=\"mode-picker\">\n                <div id=\"title\">\n                    Word List:\n                </div>\n                <div id=\"input\">\n                    <select id=\"wordlist-picker\" defaultValue={wordListCategory} onChange={handleClick}>\n                        {options}\n                    </select>\n                </div>\n            </div>\n\n            <div id=\"wordOrderPicker\" className=\"mode-picker\">\n                <div id=\"title\">\n                    Word Order:\n                </div>\n                <div id=\"buttons\">\n                    <button id=\"sequential\" className=\"selected\" onClick={handleClick}>\n                        Sequential\n                    </button>\n                    <button id=\"random\" onClick={handleClick}>\n                        Random\n                    </button>\n                </div>\n            </div>\n\n            <WordCountPicker />\n\n            <div id=\"wordlist-description\" className=\"mode-picker\">\n                <div id=\"title\">\n                    Description:\n                </div>\n                <div id=\"info\">\n                    {metadata[wordListCategory]['description']}\n                </div>\n            </div>\n        </div>\n    )\n})","import React, { useContext } from \"react\"\nimport { ChallengeContext } from \"../contexts/challengeContext\"\nimport WordListPicker from \"./WordListPicker\"\n\nexport default (function ChallengeReady() {\n\n    const {startChallenge} = useContext(ChallengeContext)\n\n    return (\n        <div id=\"challengeReady\" className=\"notify\">\n            <span id=\"notify-title\">Challenge Options</span>\n            <WordListPicker />\n            <button id=\"startChallenge\" onClick={startChallenge}>Start Challenge</button>\n        </div>\n    )\n})\n\n","import React, { useContext } from \"react\"\nimport { GameClockContext } from \"../contexts/gameClockContext\"\nimport { ChallengeContext } from \"../contexts/challengeContext\"\nimport { WordListPickerContext } from \"../contexts/wordListPickerContext\"\n\nexport default (function ChallengeComplete() {\n\n    const {gameClockTime} = useContext(GameClockContext)\n    const {setChallengeState} = useContext(ChallengeContext)\n    const {wordListCount, wordListCategory, metadata} = useContext(WordListPickerContext)\n\n    function _continue() {\n        setChallengeState('ready')\n    }\n\n    const minutes = Math.floor(gameClockTime / 60)\n    const seconds = gameClockTime % 60\n\n    let time = (minutes === 0) ? `${seconds} seconds` : `${minutes} minutes and ${seconds} seconds`\n\n    return (\n        <div id=\"challengeComplete\" className=\"notify\">\n            <span id=\"notify-title\">Challenge Complete</span>\n            <span id=\"message\">You completed <b>{wordListCount}</b> words<br />\n            from the <b>{metadata[wordListCategory]['name']}</b> word list<br />\n            in <b>{time}</b>!</span>\n            <button id=\"continue\" onClick={_continue}>Continue</button>\n\n        </div>\n    )\n})\n\n","import React, { useContext } from \"react\"\nimport { ChallengeContext } from \"../contexts/challengeContext\"\nimport ChallengeReady from \"./ChallengeReady\"\nimport ChallengeComplete from \"./ChallengeComplete\"\n\nexport default (function ChallengeOverlay() {\n\n    const {challengeState, setChallengeState} = useContext(ChallengeContext)\n    \n    return (\n        <div id=\"challenge-overlay\">\n            {challengeState === 'ready' && <ChallengeReady />}\n            {challengeState === 'completed' && <ChallengeComplete setChallengeState={setChallengeState} />}\n        </div>\n    )\n})","import React from \"react\"\nimport useMorsePlayer from \"../hooks/useMorsePlayer\"\nimport straight_key from \"../media/images/straight_key.jpg\"\nimport electronic_key from \"../media/images/electronic_key.jpg\"\n\nexport default React.memo(function Info() {\n\n    const {playMorseWord} = useMorsePlayer()\n\n    return (\n        <div id=\"info\">\n            <h1>Morse Code</h1>\n            <p>Morse code is a method of communication that uses short tones (dits) and long tones (dahs) in various sequences to make letters, numbers, and special characters. This tool will help beginners learn Morse code.</p>\n\n            <h2>Dits and Dahs</h2>\n            <p>\n                <span className=\"bold\">Dit</span> <i className=\"ri-volume-up-fill\" onClick={() => playMorseWord('.')}></i> (<span className=\"ditdah\">.</span>) Short tones and the base unit length of Morse code communication.<br />\n                <span className=\"bold\">Dah</span> <i className=\"ri-volume-up-fill\" onClick={() => playMorseWord('-')}></i> (<span className=\"ditdah\">-</span>) Long tones, each the length of three dits.\n            </p>\n\n            <h2>Spacing</h2 >\n            <p>The spacing between dits and dahs matters in Morse code. Spacing of various lengths signify different things.<br/>\n\n                <span className=\"bold\">Intra-character Spacing</span> A letter in Morse code can be made up of multiple dits and dahs. The spaces between the dits and dahs that make up a single letter are each the length of one dit. E.g., three dits, each separated by one-dit-long spaces, is an \"S\". (<span className=\"ditdah\">...</span>) <i className=\"ri-volume-up-fill\" onClick={() => playMorseWord('...')}></i><br />\n\n                <span className=\"bold\">Inter-character Spacing</span> The space between consecutive letters is three dits long. E.g., three dits, each separated by a three-dit-long spaces is \"EEE\". (<span className=\"ditdah\">. . .</span>) <i className=\"ri-volume-up-fill\" onClick={() => playMorseWord('. . .')}></i><br />\n                \n                <span className=\"bold\">Inter-word Spacing</span> The space between words is seven dits long. E.g., three dits, each separated by seven-dit-long spaces (denoted by a forward slash in this example: <span className=\"ditdah\">././.</span>), is \"E E E\". <i className=\"ri-volume-up-fill\" onClick={() => playMorseWord('././.')}></i>\n            </p>\n\n            <h2>Speed</h2>\n            <p>\n                The rate of communication is increased or decreased by adjusting the length of the dits, which in turn adjusts the length of dahs and spaces. Adjust the <b>WPM</b> (Words Per Minute) in the Options section to adjust the speed.\n            </p>\n\n            <h2>Telegraph Key Types</h2 >\n            <p>The instrument used to send Morse code is called the key.</p>\n            \n            <center><img src={straight_key} alt=\"Straight Key\" /></center>\n            <p><b>Straight Keys</b> use a single button and generate tones when pressed down. Straight keys require greater accuracy as the length of dits, dahs, and spacing is completely under manual control.</p>\n            <center><img src={electronic_key} alt=\"Electronic Key\"></img></center>\n            <p><b>Electronic Keys</b> use paddles that automatically generate dits and dahs when pressed. The Electronic Keyer used here is an Iambic keyer that uses two paddles–left paddle for dits, right paddle for dahs. Pressing both paddles simultaneously automatically alternates between dit and dah. Mode B automatically adds an extra alternate dit or dah. Switch between the two paddles at the appropriate times to build letters in Morse code.</p>\n\n            <p>Check out <a href='https://www.youtube.com/watch?v=uEy4Wvy6uUg' target='_blank' rel=\"noopener noreferrer\">this video</a> for a demonstration of the difference between Straight and Electronic keys.</p>\n        </div>\n    )\n})","/* eslint-disable array-callback-return */\nimport React from \"react\"\nimport morseCode from '../data/morse-code.json'\nimport useMorsePlayer from \"../hooks/useMorsePlayer\";\n\nexport default React.memo(function Legend() {\n\n    const { playMorseWord } = useMorsePlayer()\n\n    function handleClick(e) {\n        e.preventDefault()\n\n        let word = e.target.innerText\n\n        if (e.target.className === 'alpha') {\n            word = convertWordToMorse(word)\n        }\n        playMorseWord(word)\n    }\n\n    function convertWordToMorse(word) {\n        let morse = ''\n        for (let i in word) {\n            morse += morseCode[word[i].toLowerCase()]\n            morse += ' '\n        }\n        return morse\n    }\n\n    const numbers = Object.keys(morseCode).map((morse, index) =>\n        {\n            if (index < 10) {\n                return (\n                    <button key={\"legend_item_\"+index} className=\"item\" onClick={handleClick}>\n                        <span className=\"alpha\" key={\"legend_btn_\"+index}>{morse.toUpperCase()}</span>\n                        <span className=\"morse\" key={\"legend_spn_\"+index}>{morseCode[morse]}</span>\n                    </button>\n                )\n            }\n        }\n    )\n    const letters = Object.keys(morseCode).map((morse, index) =>\n        {\n            if (index >= 10 && index < 36) {\n                return (\n                    <button key={\"legend_item_\"+index} className=\"item\" onClick={handleClick}>\n                        <span className=\"alpha\" key={\"legend_btn_\"+index}>{morse.toUpperCase()}</span>\n                        <span className=\"morse\" key={\"legend_spn_\"+index}>{morseCode[morse]}</span>\n                    </button>\n                )\n            }\n        }\n    )\n    const special = Object.keys(morseCode).map((morse, index) =>\n        {\n            if (index > 36) {\n                return (\n                    <button key={\"legend_item_\"+index} className=\"item\" onClick={handleClick}>\n                        <span className=\"alpha\" key={\"legend_btn_\"+index}>{morse.toUpperCase()}</span>\n                        <span className=\"morse\" key={\"legend_spn_\"+index}>{morseCode[morse]}</span>\n                    </button>\n                )\n            }\n        }\n    )\n\n    return (\n        <div id=\"legend\">\n            <div id=\"legend-title\">\n                Legend\n            </div>\n            <div id=\"legend-items\">\n                {letters}\n                {numbers}\n                {special}\n            </div>\n        </div>\n    )\n})","import React, { useState, useEffect } from \"react\"\nimport morseCode from '../data/morse-code.json'\nimport useMorsePlayer from \"../hooks/useMorsePlayer\";\n\nexport default (function PlayMorseInput() {\n\n    const { playMorseWord } = useMorsePlayer()\n    const [inputValue, setInputValue] = useState('')\n    const [morseTranslation, setMorseTranslation] = useState('')\n\n    function handleChange(e) {\n        e.preventDefault()\n        setInputValue(e.target.value)\n    }\n\n    function handlePlay() {\n        playMorseWord(morseTranslation)\n    }\n\n    function convertWordToMorse(word) {\n        let morse = ''\n        for (let i in word) {\n            morse += morseCode[word[i].toLowerCase()]\n        }\n        return morse\n    }\n\n    // Live translation of text into morse code\n    useEffect(() => {\n        let arr = Array.from(inputValue.trim().toLowerCase())\n        let morse = arr.map(item => {\n            if (item === ' ') {\n                return '/'\n            } else {\n                let r = convertWordToMorse(item)\n                return (r === 'undefined' ? '?' : r + ' ')\n            }\n        })\n        let a = morse.map(i => i.trim()).join(' ').replace(/ \\/ /g,'/').replace(/ \\?/g,'?')\n        setMorseTranslation(a)\n\n    }, [inputValue])\n\n    return (\n        <div id=\"playMorseInput\">\n            <div id=\"title\">\n                <h2>Translate To Morse</h2>\n            </div>\n            <div id=\"input\">\n                <input type=\"text\" id='morseInput' value={inputValue} onChange={handleChange} placeholder=\"Type here.\" maxLength=\"25\"/> <i className=\"ri-play-fill\" onClick={handlePlay}></i>\n                <i className=\"ri-stop-fill\" onClick={() => playMorseWord('')}></i> \n            </div>\n            <div id=\"morseTranslation\">\n                <span id=\"morseTrans\">\n                    {morseTranslation === '' ? 'Morse translation will appear here.' : morseTranslation.replace(/\\?/g,'[?]').replace(/\\] /g,']')}\n                </span>\n            </div>\n        </div>\n    )\n})","import React, { useState } from \"react\"\nimport Info from \"./Info\"\nimport Legend from \"./Legend\"\nimport PlayMorseInput from \"./PlayMorseInput\"\n\nexport default (function SidebarLeft() {\n\n    const [sidebarContent, setSidebarContent] = useState('nav-learn')\n\n    // Hide/show sidebar\n    function toggleLeft() {\n        document.querySelector('.sidebar#left').classList.toggle('hide')\n        document.querySelector('#main-interface').classList.toggle('expandLeft')\n    }\n\n    // Handle sidebar navigation selection\n    function navClicked(e) {\n        if (e.target.id === 'nav-learn') {\n            setSidebarContent('nav-learn')\n        } else if (e.target.id === 'nav-legend') {\n            setSidebarContent('nav-legend')\n        } else {\n            setSidebarContent('nav-play')\n        }\n        \n        let navItems = document.querySelector(\".navbar\").childNodes\n        navItems.forEach(item => {\n            if (item.id === e.target.id) {\n                item.classList.add('selected')\n            } else {\n                item.classList.remove('selected')\n            }\n        })\n    }\n\n    return (\n        <div className=\"sidebar\" id=\"left\">\n            <div id=\"sidebar-container\">\n                <div className=\"navbar\">\n                    <div id=\"nav-play\" className=\"nav-item\" onClick={navClicked}>\n                        Play\n                    </div>\n                    <div id=\"nav-learn\" className=\"nav-item selected\" onClick={navClicked}>\n                        Learn\n                    </div>\n                    <div id=\"nav-legend\" className=\"nav-item\" onClick={navClicked}>\n                        Legend\n                    </div>\n                </div>\n\n                <div id=\"info-icon\" onClick={toggleLeft}><i className=\"ri-arrow-left-circle-line\"></i></div>\n                \n                <div id='sidebar-content'>\n                    {sidebarContent === 'nav-learn' && <Info />}\n                    {sidebarContent === 'nav-legend' && \n                        <div id=\"playerAndLegend\">\n                            <Legend />\n                            <span id=\"note\">Adjust the Morse code speed by changing the WPM in the Options menu.</span>\n                            <PlayMorseInput />\n                        </div>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n\n})\n","import React, {useContext} from \"react\"\nimport { FrequencyContext } from \"../contexts/frequencyContext\";\n\nexport default React.memo(function FrequencyPicker(props) {\n\n    const {frequency, setFrequency} = useContext(FrequencyContext)\n\n    const minFreq = 300\n    const maxFreq = 1500\n\n    function handleChange(e) {\n        if (Number(e.target.value) > maxFreq) {\n            setFrequency(maxFreq)\n        } else if (Number(e.target.value) < minFreq) {\n            setFrequency(minFreq)\n        } else {\n            setFrequency(Number(e.target.value))\n        }\n    }\n\n    function increment() {\n        setFrequency(prevFreq => {\n            if (prevFreq + 10 <= maxFreq) {\n                return (prevFreq + 10)\n            } else {\n                return maxFreq\n            }\n        })\n    }\n\n    function decrement() {\n        setFrequency(prevFreq => {\n            if (prevFreq - 10 >= minFreq) {\n                return (prevFreq - 10)\n            } else {\n                return minFreq\n            }\n        })\n    }\n    \n    return (\n        <div id='frequency' className='mode-picker'>\n            <div id='title'>\n                Frequency <span id=\"range\">({minFreq}-{maxFreq})</span>\n            </div>\n            <div id='input'>\n                <button id='freq-down' onClick={decrement}><i className=\"ri-arrow-down-s-line\"></i></button>\n                <input type=\"number\" name=\"frequency\" id='frequency-input' value={frequency} onChange={handleChange}></input>\n                <button id='freq-up' onClick={increment}><i className=\"ri-arrow-up-s-line\"></i></button>\n            </div>\n        </div>\n    )\n})","import React, {useContext} from 'react';\nimport './css/App.css';\n\nimport { GameModeContext } from \"./contexts/gameModeContext\"\nimport { MorseBufferContextProvider } from \"./contexts/morseBufferContext\"\nimport { WordFeederContextProvider } from './contexts/wordFeederContext';\nimport { WordListPickerContextProvider } from './contexts/wordListPickerContext';\nimport { GameClockContextProvider } from './contexts/gameClockContext';\nimport { WPMContextProvider } from './contexts/wpmContext';\nimport { FrequencyContextProvider } from './contexts/frequencyContext';\nimport { KeyTypeContextProvider } from './contexts/keyTypeContext';\nimport { ChallengeContextProvider } from './contexts/challengeContext';\n\nimport PracticeMode from './app-modes/PracticeMode';\nimport ChallengeMode from './app-modes/ChallengeMode'\n\nimport ModePicker from './components/ModePicker'\nimport KeyTypePicker from './components/KeyTypePicker'\nimport Header from './components/Header';\nimport WordsPerMinute from \"./components/WordsPerMinute\"\nimport MorseButtons from './components/MorseButtons'\nimport Footer from './components/Footer';\nimport ChallengeOverlay from './components/ChallengeOverlay';\nimport SidebarLeft from './components/SidebarLeft';\nimport FrequencyPicker from './components/FrequencyPicker';\n\nexport default React.memo(function App() {\n\n    const {gameMode} = useContext(GameModeContext)\n\n    return (\n        <>\n            <Header />\n            <div id='main-content'>\n                <KeyTypeContextProvider>\n                <WPMContextProvider>\n                <FrequencyContextProvider>\n                <MorseBufferContextProvider>\n                <WordListPickerContextProvider>\n                <WordFeederContextProvider>\n                <ChallengeContextProvider>\n                <GameClockContextProvider>\n                    <SidebarLeft />\n                    <div id=\"main-interface\">\n                        <div id=\"mainOptions\">\n                            <div id=\"options-left\">\n                                <ModePicker />\n                                <KeyTypePicker />\n                            </div>\n                            <div id=\"options-right\">\n                                <WordsPerMinute />\n                                <FrequencyPicker />\n                            </div>\n                        </div>\n                        {gameMode === 'practice' && <PracticeMode />}\n                        {gameMode === 'challenge' &&\n                            <>\n                                <ChallengeOverlay />\n                                <ChallengeMode />\n                            </>\n                        }\n                        <MorseButtons />\n                    </div>\n                </GameClockContextProvider>\n                </ChallengeContextProvider>\n                </WordFeederContextProvider>\n                </WordListPickerContextProvider>\n                </MorseBufferContextProvider>\n                </FrequencyContextProvider>\n                </WPMContextProvider>\n                </KeyTypeContextProvider>\n            </div>\n        <Footer />\n        </>\n    );\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {GameModeContextProvider} from \"./contexts/gameModeContext\"\n\n\nReactDOM.render(\n    <GameModeContextProvider>\n        <App />\n    </GameModeContextProvider>\n\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}